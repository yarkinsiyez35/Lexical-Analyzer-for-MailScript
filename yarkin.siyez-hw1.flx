%{ 
    int numberOfLines = 1; 
    int startComment = 0;
%}

tMAIL "Mail"
tENDMAIL "end"(" "|\t|\n)+"Mail" 
tSEND "send"
tFROM "from"
tSCHEDULE "schedule"
tENDSCHEDULE "end"(" "|\t|\n)+"Schedule" 

SPACE " "

tTO "to"

tSET "set"

tCOMMA ","

tCOLON ":"

tLPR "("

tRPR ")"

tLBR "["

tRBR "]"

tAT "@"

tIDENT [A-Za-z_][A-Za-z_0-9]*

tSTRING \"([^\"\\]|\\.)*\" 

LOCALPART [A-Za-z_0-9-]+([\\.]?[A-Za-z_0-9]+)*

LABEL ([a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])*)

DOMAIN {LABEL}("."{LABEL}){1,2}

tADDRESS {LOCALPART}@{DOMAIN}

DATE1 [0-9]{2}"/"[0-9]{2}"/"[0-9]{4}
DATE2 [0-9]{2}"."[0-9]{2}"."[0-9]{4}
DATE3 [0-9]{2}-[0-9]{2}-[0-9]{4}

tTIME [0-9]{2}":"[0-9]{2}

COMMENT "//"(.)* 

%x comment

%%

"/*" {
    startComment++;
    BEGIN(comment);
}

<comment>"*/" {
    startComment--;
    if (startComment == 0)
    {
        BEGIN(INITIAL);
    }
    else
    {
        BEGIN(comment);
    }
    
}

<comment>"/*" {startComment++;}
<comment>. {}
<comment>\n {numberOfLines++;}


\n   {numberOfLines++;}

{tMAIL}  {printf("%d_tMAIL\n", numberOfLines);}

{tENDMAIL} {
        printf("%d_tENDMAIL\n", numberOfLines);
        int strLength = strlen(yytext-1);
        int i;
        for (i = 0; i< strLength ; i++)
            {
                if (yytext[i] == '\n')
                {
                    numberOfLines++;
                }
            }
        }

{tSEND} {printf("%d_tSEND\n", numberOfLines);}

{tFROM} {printf("%d_tFROM\n", numberOfLines);}

{tSCHEDULE} {printf("%d_tSCHEDULE\n", numberOfLines);}

{tENDSCHEDULE} {printf("%d_tENDSCHEDULE\n", numberOfLines);
int strLength = strlen(yytext-1);
        int i;
        for (i = 0; i< strLength ; i++)
            {
                if (yytext[i] == '\n')
                {
                    numberOfLines++;
                }
            }
        }
 

{tTO} {printf("%d_tTO\n", numberOfLines);}

{tSET} {printf("%d_tSET\n", numberOfLines);}

{tCOMMA} {printf("%d_tCOMMA\n", numberOfLines);}

{tCOLON} {printf("%d_tCOLON\n", numberOfLines);}

{tLPR} {printf("%d_tLPR\n", numberOfLines);}

{tRPR} {printf("%d_tRPR\n", numberOfLines);}

{tLBR} {printf("%d_tLBR\n", numberOfLines);}

{tRBR} {printf("%d_tRBR\n", numberOfLines);}

{tAT} {printf("%d_tAT\n", numberOfLines);}

{tIDENT} {printf("%d_tIDENT_(%s)\n", numberOfLines, yytext);}

{tSTRING} {
            int strLength = strlen(yytext)-1;
            char outputStr[strLength];
            unsigned int i;
            for (i = 1; i< strLength; i++)
            {
                outputStr[i-1] = yytext[i];
            }
            outputStr[strLength - 1] = '\0';
            strLength++;
            printf("%d_tSTRING_(%s)\n", numberOfLines, outputStr);
            for (i = 0; i< strLength ; i++)
            {
                if (yytext[i] == '\n')
                {
                    numberOfLines++;
                }
            }
            }

{tTIME} {
            char hour[2];
            char minute[2];
            hour[0] = yytext[0];
            hour[1] = yytext[1];
            minute[0] = yytext[3];
            minute[1] = yytext[4];
            printf("%d_tTIME_(Hour_%s_Minute_%s)\n", numberOfLines, hour,minute);
            }  

{DATE1}         |
{DATE2}         |
{DATE3} {
        char day[3]; 
        char month[3];
        char year[5];  
        strncpy(day, yytext, 2);
        day[2] = '\0'; 
        strncpy(month, yytext + 3, 2);
        month[2] = '\0';  
        strncpy(year, yytext + 6, 4);
        year[4] = '\0';
        printf("%d_tDATE_(Day_%s_Month_%s_Year_%s)\n", numberOfLines, day, month, year);
        }

{tADDRESS}  {printf("%d_tADDRESS_(%s)\n", numberOfLines, yytext);}

{COMMENT}  {printf("");}

{SPACE} {}

. {printf("%d_ILLEGAL_CHARACTER_(%s)\n", numberOfLines, yytext);}

<<EOF>> {return; }
%%

int main()
{
    yylex();
}

